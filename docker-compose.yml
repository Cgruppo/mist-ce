version: '2.0'

services:


  mongodb:
    image: mongo:3.2
    volumes:
      - mongodb:/data/db:rw

  rabbitmq:
    image: rabbitmq:3.6.6-management

  memcached:
    image: memcached


  elasticsearch:
    image: elasticsearch:5.1.2
    ports:
      - 9200:9200
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:rw

  logstash:
    image: logstash:5.1.2
    environment:
      ELASTIC_PASSWORD: admin
      ELASTIC_URI: http://elasticsearch:9200
      ELASTIC_USERNAME: admin
    command: logstash -f /config-dir
    volumes:
      - ./docker/logstash:/config-dir:rw
    depends_on:
      - elasticsearch
      - rabbitmq

  kibana:
    image: kibana:5.1.2
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch


  socat:
    build: ./docker/socat/
    command:
      - TCP4-LISTEN:2375,fork,reuseaddr
      - UNIX-CONNECT:/var/run/docker.sock
    expose:
      - 2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw

  mailmock:
    image: gcr.io/mist-ops/mailmock

  debugger:
    build: ./docker/debugger
    volumes:
      - ./keys:/keys


  celery: &backend
    image: gcr.io/mist-ops/mist:io-api-$MIST_TAG
    environment:
      SETTINGS_FILE: /mist.core/settings.py
    depends_on:
      - memcached
      - mongodb
      - rabbitmq
    stdin_open: true
    tty: true
    volumes:
      - ./api:/mist.api:rw
      - ./keys:/keys
    command: /mist.api/bin/celery -l INFO

  scheduler:
    <<: *backend
    command: /mist.api/bin/scheduler

  poller:
    <<: *backend
    command: /mist.api/bin/poller

  hubshell:
    <<: *backend
    command: /mist.api/bin/hubshell

  api:
    <<: *backend
    command: /mist.api/bin/uwsgi
    expose:
      - 80

  sockjs:
    <<: *backend
    command: /mist.api/bin/sockjs
    expose:
      - 8081


  ui:
    image: gcr.io/mist-ops/ui:io-$MIST_TAG
    command: sh /entry.sh
    stdin_open: true
    tty: true
    volumes:
      - ./ui:/ui:rw
    expose:
      - 80

  landing:
    image: gcr.io/mist-ops/landing:io-$MIST_TAG
    command: sh /entry.sh
    stdin_open: true
    tty: true
    volumes:
      - ./landing:/landing:rw
    expose:
      - 80


  nginx:
    image: nginx
    ports:
      - 80:80
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
    depends_on:
      - api
      - landing
      - ui

volumes:
  elasticsearch: {}
  mongodb: {}
